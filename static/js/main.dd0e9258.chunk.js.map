{"version":3,"sources":["components/EmployeeCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/SearchForm/index.js","components/Header/index.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeCard","props","className","alt","name","src","image","firstName","surName","email","phone","Wrapper","children","Title","SearchForm","value","search","onChange","handleInputChange","type","placeholder","id","Header","onClick","sortEmployee","axios","get","App","state","employees","event","setState","target","filter","employee","first","toUpperCase","includes","preventDefault","sort","a","b","nameA","nameB","API","then","res","data","results","catch","err","console","log","this","map","i","picture","thumbnail","last","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6WA6BeA,MA1Bf,SAAsBC,GAElB,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,uBACX,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,SAErC,yBAAKJ,UAAU,cACVD,EAAMM,UADX,IACuBN,EAAMO,SAE7B,yBAAKN,UAAU,cACVD,EAAMQ,OAKX,yBAAKP,UAAU,cACVD,EAAMS,U,MCdZC,MAJf,SAAiBV,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMW,W,MCG1BC,MAJf,SAAeZ,GACb,OAAO,wBAAIC,UAAU,0BAA0BD,EAAMW,W,MCiBxCE,MAlBf,SAAoBb,GAClB,OACE,0BAAMC,UAAU,UAChB,yBAAKA,UAAU,cACX,2BACAa,MAAOd,EAAMe,OACbC,SAAUhB,EAAMiB,kBAChBd,KAAK,WACLe,KAAK,OACLjB,UAAU,eACVkB,YAAY,mBACZC,GAAG,gB,MCeIC,MA1Bf,SAAgBrB,GACd,OAEE,yBAAKC,UAAU,OACf,yBAAKA,UAAU,UAEf,wBAAIA,UAAU,SAAd,SAEA,yBAAKA,UAAU,SACf,oCAEI,4BAAQiB,KAAK,SAASI,QAAStB,EAAMuB,aAActB,UAAU,oCAA7D,UAKJ,wBAAIA,UAAU,SAAd,W,iBChBW,EACC,WACZ,OAAOuB,IAAMC,IAJD,0CC4EDC,G,kNAjEbC,MAAQ,CACNZ,OAAQ,GACRa,UAAW,I,EASbX,kBAAoB,SAAAY,GAClB,EAAKC,SAAS,CAACf,OAAQc,EAAME,OAAOjB,QACpC,IAAMc,EAAY,EAAKD,MAAMC,UAAUI,QAAO,SAAAC,GAAQ,OAAIA,EAAS9B,KAAK+B,MAAMC,cAAcC,SAAS,EAAKT,MAAMZ,OAAOoB,kBACvH,EAAKL,SAAS,CAAEF,e,EAKlBL,aAAe,SAAAM,GACbA,EAAMQ,iBACJ,IAAMT,EAAY,EAAKD,MAAMC,UAAUU,MAAK,SAASC,EAAEC,GACvD,IAAIC,EAAQF,EAAE/B,MAAM2B,cAChBO,EAAQF,EAAEhC,MAAM2B,cACpB,OAAIM,EAAQC,GACF,EAEND,EAAQC,EACH,EAGF,KAGT,EAAKZ,SAAS,CAAEF,e,kEA7BG,IAAD,OAClBe,IACGC,MAAK,SAAAC,GAAG,OAAI,EAAKf,SAAS,CAAEF,UAAWiB,EAAIC,KAAKC,aAChDC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BA8B1B,OACI,kBAAC,EAAD,KACE,kBAAC,EAAD,2BAEE,yBAAKhD,UAAU,aACf,kBAAC,EAAD,CACEgB,kBAAmBmC,KAAKnC,oBAE1B,kBAAC,EAAD,CACEM,aAAc6B,KAAK7B,eAEpB6B,KAAKzB,MAAMC,UAAUyB,KAAI,SAACpB,EAASqB,GAAV,OACxB,kBAAC,EAAD,CACEjD,MAAO4B,EAASsB,QAAQC,UACxBlD,UAAW2B,EAAS9B,KAAK+B,MACzB3B,QAAS0B,EAAS9B,KAAKsD,KACvBjD,MAAOyB,EAASzB,MAChBC,MAAOwB,EAASxB,MAChBiD,IAAKJ,a,GA1DLK,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.dd0e9258.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nfunction EmployeeCard(props){\r\n\r\n    return (        \r\n        <div className=\"card my-1\">\r\n            <div className=\"row\">\r\n                <div className=\"img-container col-1\">\r\n                    <img alt={props.name} src={props.image} />\r\n                </div>                \r\n                <div className=\"col-4 pt-2\">\r\n                    {props.firstName} {props.surName}\r\n                 </div>\r\n                <div className=\"col-5 pt-2\">\r\n                    {props.email}  \r\n                    {/*<button onClick={() => props.filterEmployee(props.email)} className=\"filter btn btn-success float-right\">\r\n                     filter\r\n                    </button>*/}\r\n                </div>\r\n                <div className=\"col-2 pt-2\">\r\n                    {props.phone}    \r\n                </div>       \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default EmployeeCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return <h1 className=\"title text-center py-4\">{props.children}</h1>;\r\n}\r\n\r\nexport default Title;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction SearchForm(props) {\r\n  return (\r\n    <form className=\"search\">\r\n    <div className=\"form-group\">\r\n        <input\r\n        value={props.search}\r\n        onChange={props.handleInputChange}\r\n        name=\"employee\"\r\n        type=\"text\"\r\n        className=\"form-control\"\r\n        placeholder=\"search Employees\"\r\n        id=\"employee\"\r\n        />\r\n    </div>\r\n  </form>\r\n  )\r\n}\r\n\r\nexport default SearchForm;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    \r\n    <div className=\"row\">\r\n    <div className=\"col-1\">\r\n    </div>\r\n    <h5 className=\"col-4\"> Name\r\n    </h5>\r\n    <div className=\"col-5\">\r\n    <h5 >\r\n        Email\r\n        <button type=\"submit\" onClick={props.sortEmployee} className=\"sort btn btn-success float-right\">\r\n                     sort\r\n        </button>\r\n    </h5>\r\n    </div>\r\n    <h5 className=\"col-2\">\r\n        Phone\r\n    </h5>       \r\n    </div>\r\n\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default Header;","import axios from \"axios\";\r\nconst BASEURL = \"https://randomuser.me/api/?results=20\";\r\n\r\nexport default {\r\n  getEmployees: function() {\r\n    return axios.get(BASEURL);\r\n  }\r\n};\r\n","import React, { Component } from 'react';\nimport EmployeeCard from \"./components/EmployeeCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport SearchForm from \"./components/SearchForm\";\nimport Header from \"./components/Header\";\nimport API from \"./utils/API\";\nimport './App.css';\n\n\nclass App extends Component {\n\n  state = {\n    search: \"\",\n    employees: []\n  };\n\n  componentDidMount() {\n    API.getEmployees()\n      .then(res => this.setState({ employees: res.data.results }))\n      .catch(err => console.log(err));\n  };\n\n  handleInputChange = event => {\n    this.setState({search: event.target.value});\n    const employees = this.state.employees.filter(employee => employee.name.first.toUpperCase().includes(this.state.search.toUpperCase()));\n    this.setState({ employees });\n  };\n\n\n  //Sort users by email address.\n  sortEmployee = event => {\n    event.preventDefault();\n      const employees = this.state.employees.sort(function(a,b){\n      let nameA = a.email.toUpperCase(); // ignore upper and lowercase\n      let nameB = b.email.toUpperCase(); // ignore upper and lowercase\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }    \n      // names must be equal\n      return 0;\n\n    })\n    this.setState({ employees });\n  }\n\n  render(){\n      return(\n          <Wrapper>\n            <Title>Employee Directory</Title>\n            \n              <div className=\"container\">\n              <SearchForm\n                handleInputChange={this.handleInputChange}\n              />              \n              <Header\n                sortEmployee={this.sortEmployee}\n              />\n              {this.state.employees.map((employee,i) => (\n                <EmployeeCard \n                  image={employee.picture.thumbnail}\n                  firstName={employee.name.first}\n                  surName={employee.name.last}\n                  email={employee.email}\n                  phone={employee.phone}\n                  key={i}\n                  />\n              ))}\n              </div>\n          </Wrapper>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}